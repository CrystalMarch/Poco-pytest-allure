# pytest.ini
[pytest]

;;;general:
;-m MARKEXPR           only run tests matching given mark expression. example: -m 'mark1 and not mark2'.
;-s                    shortcut for --capture=no.  【能实时输出log】
;--ff, --failed-first  run all tests but run the last failures first. This may re-order tests and thus lead to repeated fixture setup/teardown
;--allure-features=FEATURES_SET, Comma-separated list of epic names. Run tests that have at least one of the specified feature labels.
;--allure-stories=STORIES_SET, Comma-separated list of story names. Run tests that have at least one of the specified story labels.

;;;reporting:
;-v, --verbose         increase verbosity.
;--disable-warnings, --disable-pytest-warnings
;--tb=style            traceback print mode (auto/long/short/line/native/no).
;--alluredir=DIR       Generate Allure report in the specified directory (may not exist)
;--clean-alluredir     Clean alluredir folder if it exists

;;;re-run failing tests to eliminate flaky failures:
;--reruns=RERUNS       number of times to re-run failed tests. defaults to 0.
;--reruns-delay=RERUNS_DELAY , add time (seconds) delay between reruns.

;;;distributed and subprocess testing:
;-n numprocesses, --numprocesses=numprocesses, you can use 'auto' here for auto detection CPUs number on host system and it will be 0 when used with --pdb

addopts = -v --ff --tb=short --disable-warnings --alluredir=allure_pytest_results --clean-alluredir

markers =
    old_test: run as old tests
    new_test: run as new tests
    debug_test: run as debug tests
    skip_test: skip